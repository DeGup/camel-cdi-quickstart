{
  "apiVersion": "v1",
  "kind": "Template",
  "labels": {},
  "metadata": {
    "annotations": {
      "description": "# CDI Camel QuickStart\n\nThis example shows how to work with Camel in the Java Container using CDI to configure components,\nendpoints and beans.\n\nThis example is implemented using Java code with CDI injected resources such as Camel endpoints and Java beans.\n\n### Building\n\nThe example can be built with\n\n    mvn clean install\n\n### Running the example locally\n\nThe example can be run locally using the following Maven goal:\n\n    mvn clean install exec:java\n\n\n### Running the example in fabric8\n\nIt is assumed that OpenShift platform is already running. If not you can find details how to [Install OpenShift at your site](https://docs.openshift.com/enterprise/3.1/install_config/install/index.html).\n\nThe example can be built and deployed using a single goal:\n\n    mvn -Pf8-deploy\n\nWhen the example runs in OpenShift, you can use the OpenShift client tool to inspect the status\n\nTo list all the running pods:\n\n    oc get pods\n\nThen find the name of the pod that runs this quickstart, and output the logs from the running pods with:\n\n    oc logs <name of pod>\n\nYou can also use the OpenShift [web console](https://docs.openshift.com/enterprise/3.1/getting_started/developers/developers_console.html#tutorial-video) to manage the\nrunning pods, and view logs and much more.\n\n\n### Running the example using OpenShift S2I template\n\nThe example can also be built and run using the included S2I template quickstart-template.json.\n\nThe application can be run directly by first editing the template file and populating S2I build parameters, including the required parameter GIT_REPO and then executing the command:\n\n    oc new-app -f quickstart-template.json\n\nAlternatively the template file can be used to create an OpenShift application template by executing the command:\n\n    oc create -f quickstart-template.json\n\n\n### More details\n\nYou can find more details about running this [quickstart](http://fabric8.io/guide/quickstarts/running.html) on the website. This also includes instructions how to change the Docker image user and registry.\n\n",
      "iconClass": "icon-java"
    },
    "labels": {},
    "name": "s2i-quickstart-cdi-camel - Acceptance"
  },
  "parameters": [
    {
      "name": "APP_NAME",
      "value": "s2i-quickstart-cdi-camel",
      "description": "Application Name"
    },

    {
      "name": "SERVICE_NAME",
      "value": "s2i-qs-cdi-camel",
      "description": "Exposed Service name"
    },

    {
      "name": "APP_VERSION",
      "value": "2.2.0.redhat-079",
      "description": "Application version"
    },

    {
      "name": "MAVEN_MIRROR_URL",
      "description": "Maven Mirror URL",
      "required": true
    }

  ],
  "objects": [
    {
      "apiVersion": "v1",
      "kind": "Service",
      "metadata": {
        "annotations": {
          "prometheus.io/port": "9779",
          "prometheus.io/scrape": "true"
        },
        "labels": {
          "container": "java",
          "component": "${APP_NAME}-acceptance",
          "provider": "s2i",
          "project": "${APP_NAME}",
          "version": "${APP_VERSION}",
          "group": "quickstarts"
        },
        "name": "${SERVICE_NAME}-acceptance"
      },
      "spec": {
        "clusterIP": "None",
        "deprecatedPublicIPs": [],
        "ports": [
          {
            "port": 1
          }
        ],
        "selector": {
          "container": "java",
          "project": "${APP_NAME}",
          "component": "${APP_NAME}-acceptance",
          "provider": "s2i",
          "group": "quickstarts"
        }
      }
    },


    {
      "kind": "DeploymentConfig",
      "apiVersion": "v1",
      "metadata": {
        "name": "${APP_NAME}-acceptance",
        "creationTimestamp": null,
        "labels": {
          "component": "${APP_NAME}-acceptance",
          "container": "java",
          "group": "quickstarts",
          "project": "${APP_NAME}",
          "provider": "s2i",
          "version": "${APP_VERSION}"
        }
      },
      "spec": {
        "strategy": {
          "resources": {}
        },
        "triggers": [
          {
            "type": "ConfigChange"
          },
          {
            "type": "ImageChange",
            "imageChangeParams": {
              "automatic": true,
              "containerNames": [
                "${APP_NAME}-acceptance"
              ],
              "from": {
                "kind": "ImageStreamTag",
                "name": "${APP_NAME}:acceptance"
              }
            }
          }
        ],
        "replicas": 1,
        "selector": {
          "component": "${APP_NAME}-acceptance",
          "container": "java",
          "deploymentconfig": "${APP_NAME}-acceptance",
          "group": "quickstarts",
          "project": "${APP_NAME}",
          "provider": "s2i",
          "version": "${APP_VERSION}"
        },
        "template": {
          "metadata": {
            "creationTimestamp": null,
            "labels": {
              "component": "${APP_NAME}-acceptance",
              "container": "java",
              "deploymentconfig": "${APP_NAME}-acceptance",
              "group": "quickstarts",
              "project": "${APP_NAME}",
              "provider": "s2i",
              "version": "${APP_VERSION}"
            }
          },
          "spec": {
            "containers": [
              {
                "name": "${APP_NAME}-acceptance",
                "image": "library/${APP_NAME}:acceptance",
                "readinessProbe": {
                  "exec": {
                    "command": [
                      "/bin/bash",
                      "-c",
                      "(curl -f 127.0.0.1:8778) >/dev/null 2>&1; test $? != 7"
                    ]
                  },
                  "initialDelaySeconds": 30,
                  "timeoutSeconds": 5
                },
                "ports": [
                  {
                    "containerPort": 8778,
                    "name": "jolokia",
                    "protocol": "TCP"
                  }
                ],
                "resources": {}
              }
            ]
          }
        }
      },
      "status": {}
    }

  ]
}